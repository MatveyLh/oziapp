{"version":3,"sources":["utils/HTTPWrapper.ts","components/Login/Login.tsx","components/Profile/Profile.tsx","utils/PrivateRoute.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","HTTPWrapper","url","data","axios","post","headers","Authorization","localStorage","getItem","get","Login","props","state","isAuth","isError","this","to","initialValues","email","password","validationSchema","Yup","shape","required","min","onSubmit","fields","setState","fetch","clientId","then","res","setItem","tokenType","accessToken","catch","render","errors","touched","className","htmlFor","name","type","component","React","Component","Profile","useState","setData","setIsAuth","isChangePassword","setIsChangePassword","useEffect","Fragment","onClick","removeItem","Dialog","onClose","aria-labelledby","open","DialogTitle","id","DialogContent","style","width","dividers","Typography","oldPassword","console","log","PrivateRoute","rest","App","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.b97d5a5b.chunk.js","sourcesContent":["import axios from 'axios';\nconst api = 'https://tager.dev.ozitag.com';\n\nexport default class HTTPWrapper {\n    post(url: string, data?: any) {\n       return axios.post(`${api}/${url}`, data, {headers: {\"Access-Control-Allow-Origin\": \"*\", Authorization: localStorage.getItem('token')}})\n    }\n    get(url: string) {\n        return axios.get(`${api}/${url}`, {headers: {Authorization: localStorage.getItem('token')}})\n    }\n}\n\n","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport * as Yup from \"yup\";\nimport HTTPWrapper from \"../../utils/HTTPWrapper\";\nimport './Login.css';\n\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\n\nexport default class Login extends React.Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            isAuth: false,\n            isError: false,\n        }\n    }\n    render() {\n\n        if (this.state.isAuth || localStorage.getItem('token')) {\n            return <Redirect to={'/profile'}/>\n        }\n\n        return (\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                }}\n                validationSchema={Yup.object().shape({\n                    email: Yup.string()\n                        .email('Email is invalid')\n                        .required('Email is required'),\n                    password: Yup.string()\n                        .min(4, 'Password must be at least 4 characters')\n                        .required('Password is required'),\n                })}\n                onSubmit={(fields: any) => {\n                    this.setState({isError: false});\n                    const fetch = new HTTPWrapper();\n                    const data = {\n                        email: fields.email,\n                        password: fields.password,\n                        clientId: 1,\n                    }\n\n                    fetch.post('api/auth/user', data)\n                        .then(res => {\n                            localStorage.setItem('token', res.data.data.tokenType + ' ' + res.data.data.accessToken)\n                        })\n                        .then(() => {\n                            this.setState({isAuth: true})\n                        })\n                        .catch(() => {\n                            this.setState({isError: true})\n                        })\n                }}\n                render={({ errors, touched }) => (\n                    <Form className={'form-login'}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"email\">Email</label>\n                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"password\">Password</label>\n                            <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n                        </div>\n\n                        {this.state.isError ? <p className={'error-message'}>Data is invalid!</p> : ''}\n\n                        <div className=\"form-group form-group_button\">\n                            <button type=\"submit\" className=\"btn btn-primary\">Login</button>\n                        </div>\n                    </Form>\n                )}\n            />\n        )\n    }\n}\n","import React, {useState, useEffect} from 'react';\nimport HTTPWrapper from \"../../utils/HTTPWrapper\";\nimport {Redirect} from 'react-router-dom';\nimport './Profile.css';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Typography from '@material-ui/core/Typography';\nimport {DialogContent} from \"@material-ui/core\";\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from \"yup\";\n\nconst Profile = () => {\n    const [data, setData] = useState({email: '', name: ''});\n    const [isAuth, setIsAuth] = useState(true);\n    const [isChangePassword, setIsChangePassword] = useState(false);\n\n    useEffect(() => {\n        const axios = new HTTPWrapper();\n        axios.get('/api/tager/user/profile')\n            .then(res => {\n                setData(res.data.data);\n            })\n    }, [])\n\n    const exit = () => {\n        const axios = new HTTPWrapper();\n        axios.post('api/tager/user/profile/logout')\n            .then(() => {\n                localStorage.removeItem('token');\n                setIsAuth(false);\n            })\n    }\n\n    const changePassword = () => {\n        setIsChangePassword(true);\n    }\n\n    if (!isAuth) {\n        return <Redirect to={'/'}/>\n    }\n    return (\n        <React.Fragment>\n            <div className={'profile-wrapper'}>\n                <p>Email: {data.email}</p>\n                <p>Name: {data.name}</p>\n            </div>\n            <div className={'profile-buttons'}>\n                <button className={'profile-buttons_btn'} onClick={changePassword}>Изменить пароль</button>\n                <button onClick={exit} className={'profile-buttons_btn exit-btn'}>Выйти</button>\n            </div>\n\n            <Dialog onClose={() => {setIsChangePassword(false)}} aria-labelledby=\"customized-dialog-title\"\n                    open={isChangePassword}>\n                <DialogTitle id=\"customized-dialog-title\" >\n                    Modal title\n                </DialogTitle>\n                <DialogContent style={{width: '600px'}} dividers>\n                    <Typography>\n                        <Formik\n                            initialValues={{\n                                oldPassword: '',\n                                password: '',\n                            }}\n                            validationSchema={Yup.object().shape({\n                                oldPassword: Yup.string()\n                                    .min(4, 'Password must be at least 4 characters')\n                                    .required('Old password is required'),\n                                password: Yup.string()\n                                    .min(4, 'Password must be at least 4 characters')\n                                    .required('New password is required'),\n                            })}\n                            onSubmit={(fields: any) => {\n                                const data = {\n                                    oldPassword: fields.oldPassword,\n                                    password: fields.password,\n                                    clientId: 1,\n                                }\n                                console.log(data)\n                            }}\n                            render={({ errors, touched }) => (\n                                <Form>\n                                    <label htmlFor=\"oldPassword\">Old password</label>\n                                    <Field name=\"oldPassword\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                    <ErrorMessage name=\"oldPassword\" component=\"div\" className=\"invalid-feedback\" />\n\n\n                                    <label htmlFor=\"password\">New Password</label>\n                                    <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\n                                    <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\n\n                                    <button type=\"submit\" className=\"btn btn-primary changePassword-btn\">Login</button>\n                                </Form>\n                            )}\n                        />\n                    </Typography>\n                </DialogContent>\n            </Dialog>\n        </React.Fragment>\n\n    )\n}\n\nexport default Profile;","import React from 'react'\nimport { Route, Redirect, RouteProps } from 'react-router-dom'\n\ninterface PrivateRouteProps extends RouteProps {\n    component: any;\n    rest?: any;\n    path: any,\n}\n\nconst PrivateRoute: React.SFC<PrivateRouteProps> = ({ component: Component, ...rest }: any) => (\n    <Route\n        {...rest}\n        render={(props) =>\n            localStorage.getItem('token') ?\n                <Component {...props} />\n                :\n                <Redirect to='/login' />\n        }\n    />\n);\n\nexport default PrivateRoute;","import React from 'react';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport Login from \"./components/Login/Login\";\nimport Profile from \"./components/Profile/Profile\";\nimport PrivateRoute from \"./utils/PrivateRoute\";\nimport './App.css';\n\n\nconst App = () => {\n  return (\n      <Router>\n        <Route path={'/'} component={(props: any) => <Login {...props}/>}/>\n        <PrivateRoute component={() => <Profile/>} path={'/profile'}/>\n      </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}